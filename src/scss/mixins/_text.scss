@mixin link() {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    color: rgba($color-secondary, 0.6);
    transition: color 0.2s;
    cursor: pointer;

    &__icon {
        margin-right: 5px;
    }

    &__text::after {
        width: 0;
        height: 2px;
        position: absolute;
        left: 50%;
        bottom: -5px;
        background-color: #61718c;
        transition: width 0.2s, left 0.2s;
        content: ' ';
    }

    &:hover {
        color: #61718c;
    }

    &:hover &__text::after {
        width: 100%;
        left: 0;
    }
}

/**
 * Mixin for injecting font specific styles.
 *
 * @param {string} $name
 */
@mixin use-font($name) {
    @if (not map-has-key($font-settings, $name)) {
        @error 'use-font: invalid font setting #{$name}';
    }

    @include map-as-properties(map-get($font-settings, $name));
}

/**
 * Mixin for injecting text specific styles.
 *
 * @param {string} $name
 */

@mixin use-text($name) {
    @if (not map-has-key($text-settings, $name)) {
        @error 'use-text : invalid text setting #{$name}';
    }

    $settings: map-get($text-settings, $name);
    $all-settings: map-get($settings, all);

    @if (map-has-key($all-settings, font-settings)) {
        @include use-font(map-get($all-settings, font-settings));
    }
    @include map-as-properties($all-settings, '', font-settings spacing-settings);

    @each $breakpoint-name, $breakpoint in $breakpoint-settings {
        @if (map-has-key($settings, $breakpoint-name)) {
            @include use-breakpoint($breakpoint-name) {
                @include map-as-properties(map-get($settings, $breakpoint-name), '', font-settings spacing-settings);
            }
        }
    }

    @each $breakpoint-name, $properties in $settings {
        @if (str-slice($breakpoint-name, 0, 6) == 'custom') {
            @include use-breakpoint($breakpoint-name) {
                @include map-as-properties(map-get($settings, $breakpoint-name), $ignore: (min-width, max-width));
            }
        }
    }
}
