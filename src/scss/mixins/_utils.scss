/**
 * Update a deeply nested key
 *
 * @author Hugo Giraudel
 * @param {Map} $map - Map to update
 * @param {Arglist} $keys - Keys to access to value to update
 * @param {*} $value - New value (last member of `$keys`)
 * @return {Map} - Updated map
 */
@function map-deep-set($map, $keys...) {
    $map-list: ($map,);
    $result: null;

    @if length($keys) == 2 {
        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }

    @for $i from 1 through length($keys) - 2 {
        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }

    @for $i from length($map-list) through 1 {
        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
    }

    @return $result;
}

/**
 * Returns the item named $key from $map.
 * If $key is not found $default is returned.
 *
 * @param {Map} $map
 * @param {String} $key
 * @param {*} $default
 * @returns {*}
 */
@function map-get-default($map, $key, $default) {
    @if ($map) {
        @if (map-has-key($map, $key)) {
            @return map-get($map, $key);
        }
    }
    @return $default;
}

/**
 * Creates a property list based of $map.
 * Each property name is prefixed with $prefix.
 * When $ignore is given every property found in the list will be ignored.
 *
 * @param {Map} $map
 * @param {String} $prefix
 * @param {List} $ignore
 * @returns {void}
 */
@mixin map-as-properties($map, $prefix: '', $ignore: none, $include: all) {
    @if ($map) {
        @each $property, $value in $map {
            @if (($ignore == none or not index($ignore, $property)) and ($include == all or index($include, $property))) {
                #{$prefix}#{$property}: $value;
            }
        }
    }
}

/**
 * Adds a before element that will guarantee the defined aspect ration on a block element
 *
 * @param $width
 * @param $height
 */
@mixin maintain-aspect-ratio($width, $height) {
    &::before {
        content: '';
        display: block;
        padding-top: ($height / $width) * 100%;
        width: 100%;
    }
}
